import { SlashCommandBuilder } from 'discord.js';
import { listTransactions } from '../libs/casso.js';
import fs from 'fs-extra';
import path from 'path';

export default {
  data: new SlashCommandBuilder()
    .setName('checkpay')
    .setDescription('Qu√©t Casso & x√°c nh·∫≠n ƒë∆°n PENDING h√¥m nay'),

  async execute(interaction) {
    await interaction.deferReply({ ephemeral: true });

    try {
      console.log('üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra giao d·ªãch Casso...');
      
      const today = new Date().toISOString().slice(0, 10);
      console.log(`üìÖ Ki·ªÉm tra giao d·ªãch ng√†y: ${today}`);
      
      // Ki·ªÉm tra xem Casso API c√≥ ho·∫°t ƒë·ªông kh√¥ng
      let txs;
      try {
        txs = await listTransactions(today);
        console.log(`üìä T√¨m th·∫•y ${txs.length} giao d·ªãch t·ª´ Casso`);
      } catch (cassoError) {
        console.error('‚ùå L·ªói Casso API:', cassoError);
        return await interaction.editReply('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Casso API. Ki·ªÉm tra API key v√† network!');
      }
      
      const ordersPath = path.join(process.cwd(), 'data', 'orders.json');
      const orders = await fs.readJSON(ordersPath).catch(() => []);
      
      const pendingOrders = orders.filter(o => o.status === 'PENDING');
      console.log(`üìã C√≥ ${pendingOrders.length} ƒë∆°n h√†ng PENDING`);

      let hit = 0;
      
      for (const tx of txs) {
        const od = orders.find(o =>
          o.status === 'PENDING' &&
          o.amount === tx.amount &&
          tx.description && tx.description.includes(o.orderCode)
        );
        
        if (!od) continue;

        od.status = 'PAID';
        od.paidAt = tx.when;
        hit++;

        // G·ª≠i th√¥ng b√°o
        try {
          const ch = await interaction.client.channels.fetch(od.channelId);
          await ch.send(
            `‚úÖ **ƒê√£ nh·∫≠n ${tx.amount.toLocaleString('vi-VN')} VND**\n` +
            `ƒê∆°n \`${od.orderCode}\` c·ªßa <@${od.userId}>.`
          );
        } catch (e) { 
          console.warn('Kh√¥ng g·ª≠i ƒë∆∞·ª£c th√¥ng b√°o:', e.message); 
        }
      }

      await fs.writeJSON(ordersPath, orders, { spaces: 2 });
      
      await interaction.editReply(
        `üîç **K·∫øt qu·∫£ ki·ªÉm tra:**\n` +
        `‚Ä¢ T√¨m th·∫•y ${txs.length} giao d·ªãch h√¥m nay\n` +
        `‚Ä¢ C√≥ ${pendingOrders.length} ƒë∆°n PENDING\n` +
        `‚Ä¢ ƒê√£ kh·ªõp **${hit}** giao d·ªãch ‚úÖ`
      );
      
    } catch (err) {
      console.error('‚ùå L·ªói checkpay:', err);
      await interaction.editReply('‚ö†Ô∏è ƒê√£ c√≥ l·ªói x·∫£y ra khi ki·ªÉm tra giao d·ªãch!');
    }
  }
};